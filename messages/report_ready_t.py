"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class report_ready_t(object):
    """
    
    Clients -> Server
    
    Sent _from_ nodes when they've finished initialization.
    """

    __slots__ = ["id"]

    __typenames__ = ["int8_t"]

    __dimensions__ = [None]

    def __init__(self):
        self.id = 0
        """ LCM Type: int8_t """

    def encode(self):
        buf = BytesIO()
        buf.write(report_ready_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.id))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != report_ready_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return report_ready_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = report_ready_t()
        self.id = struct.unpack(">b", buf.read(1))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if report_ready_t in parents: return 0
        tmphash = (0x68dd721286446c8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if report_ready_t._packed_fingerprint is None:
            report_ready_t._packed_fingerprint = struct.pack(">Q", report_ready_t._get_hash_recursive([]))
        return report_ready_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", report_ready_t._get_packed_fingerprint())[0]

