"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class freeze_t(object):
    """
    Build with: lcm-gen -p messages.lcm
    
    Server -> Clients
    
    Sent to a 'notit' when tagged.  It may have moved between when it last updated and when it got this.
    The server is authoritative so it will move back to the position where it was tagged.
    """

    __slots__ = ["id", "position"]

    __typenames__ = ["int8_t", "int16_t"]

    __dimensions__ = [None, [2]]

    def __init__(self):
        self.id = 0
        """ LCM Type: int8_t """
        self.position = [ 0 for dim0 in range(2) ]
        """ LCM Type: int16_t[2] """

    def encode(self):
        buf = BytesIO()
        buf.write(freeze_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.id))
        buf.write(struct.pack('>2h', *self.position[:2]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != freeze_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return freeze_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = freeze_t()
        self.id = struct.unpack(">b", buf.read(1))[0]
        self.position = struct.unpack('>2h', buf.read(4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if freeze_t in parents: return 0
        tmphash = (0xb6de5cfb1fd39e02) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if freeze_t._packed_fingerprint is None:
            freeze_t._packed_fingerprint = struct.pack(">Q", freeze_t._get_hash_recursive([]))
        return freeze_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", freeze_t._get_packed_fingerprint())[0]

